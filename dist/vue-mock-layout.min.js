var VueMockLayout = (function (exports,Vue) {
    'use strict';

    Vue = Vue && Vue.hasOwnProperty('default') ? Vue['default'] : Vue;

    var reactiveComponent = new Vue({
        data: function data() {
            return {
                event: null,
                vssWidth: null,
                vssHeight: null
            }
        }
    });

    var VueScreenSizeMixin = {
        computed: {
            $vssEvent: function $vssEvent() {
                return reactiveComponent.event
            },
            $vssWidth: function $vssWidth() {
                return reactiveComponent.vssWidth || this.getScreenWidth()
            },
            $vssHeight: function $vssHeight() {
                return reactiveComponent.vssHeight || this.getScreenHeight()
            }
        },
        methods: {
            getScreenWidth: function getScreenWidth() {
                return window.innerWidth
                || document.documentElement.clientWidth
                || document.body.clientWidth
            },
            getScreenHeight: function getScreenHeight() {
                return window.innerHeight
                || document.documentElement.clientHeight
                || document.body.clientHeight
            },
            handleResize: function handleResize(event) {
                reactiveComponent.event = event;
                reactiveComponent.vssWidth = this.getScreenWidth();
                reactiveComponent.vssHeight = this.getScreenHeight();
            },

            $vssDestroyListener: function $vssDestroyListener() {
                window.removeEventListener('resize', this.handleResize);
            }
        },
        mounted: function mounted() {
            window.addEventListener('resize', this.handleResize);
        },
        destroyed: function destroyed() {
            window.removeEventListener('resize', this.handleResize);
        }
    };

    var install = function (Vue$$1) {
        Vue$$1.mixin(VueScreenSizeMixin);
    };

    // Note that here we're not only exporting the install function, but
    // also the mixin itself - this is so with can `Vue.use()` or
    // `mixins: [],` it.
    var index = { install: install, VueScreenSizeMixin: VueScreenSizeMixin };

    //

    var script = {
        name: 'vue-mock-layout',
        mixins: [index.VueScreenSizeMixin],
        props: {
            mobileBreakpoint: {
                type: Number,
                required: false,
                default: 992
            },
            desktopHeight: {
                type: Number,
                required: false,
                default: 100
            },
            mobileHeight: {
                type: Number,
                required: false,
                default: 100
            },
            background: {
                type: String,
                required: false,
                default: '#128AB2'
            },
            textColor: {
                type: String,
                required: false,
                default: 'white'
            },
            text: {
                type: String,
                required: false,
                default: 'section'
            },
            fontSize: {
                type: String,
                required: false,
                default: '2rem'
            }
        },
        data: function data () {
            return {
            }
        }
    }

    function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
    /* server only */
    , shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
      if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
      } // Vue.extend constructor export interop.


      var options = typeof script === 'function' ? script.options : script; // render functions

      if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true; // functional template

        if (isFunctionalTemplate) {
          options.functional = true;
        }
      } // scopedId


      if (scopeId) {
        options._scopeId = scopeId;
      }

      var hook;

      if (moduleIdentifier) {
        // server build
        hook = function hook(context) {
          // 2.3 injection
          context = context || // cached call
          this.$vnode && this.$vnode.ssrContext || // stateful
          this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
          // 2.2 with runInNewContext: true

          if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
            context = __VUE_SSR_CONTEXT__;
          } // inject component styles


          if (style) {
            style.call(this, createInjectorSSR(context));
          } // register component module identifier for async chunk inference


          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        }; // used by ssr in case component is cached and beforeCreate
        // never gets called


        options._ssrRegister = hook;
      } else if (style) {
        hook = shadowMode ? function () {
          style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
        } : function (context) {
          style.call(this, createInjector(context));
        };
      }

      if (hook) {
        if (options.functional) {
          // register for functional component in vue file
          var originalRender = options.render;

          options.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          // inject component registration as beforeCreate hook
          var existing = options.beforeCreate;
          options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }

      return script;
    }

    var normalizeComponent_1 = normalizeComponent;

    /* script */
    var __vue_script__ = script;
    /* template */
    var __vue_render__ = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", [
        _c(
          "div",
          {
            staticClass: "vue-mock-layout",
            style: {
              height:
                _vm.$vssWidth > _vm.mobileBreakpoint
                  ? _vm.deskTopHeight + "px"
                  : _vm.mobileHeight + "px",
              background: _vm.background
            }
          },
          [
            _c(
              "div",
              {
                staticClass: "vue-mock-layout__text",
                style: { color: _vm.textColor, fontSize: _vm.fontSize }
              },
              [_vm._v("\n            " + _vm._s(_vm.text) + "\n        ")]
            )
          ]
        )
      ])
    };
    var __vue_staticRenderFns__ = [];
    __vue_render__._withStripped = true;

      /* style */
      var __vue_inject_styles__ = undefined;
      /* scoped */
      var __vue_scope_id__ = undefined;
      /* module identifier */
      var __vue_module_identifier__ = undefined;
      /* functional template */
      var __vue_is_functional_template__ = false;
      /* style inject */
      
      /* style inject SSR */
      

      
      var component = normalizeComponent_1(
        { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
        __vue_inject_styles__,
        __vue_script__,
        __vue_scope_id__,
        __vue_is_functional_template__,
        __vue_module_identifier__,
        undefined,
        undefined
      )

    // Import vue component

    // install function executed by Vue.use()
    function install$1(Vue$$1) {
    	if (install$1.installed) { return; }
    	install$1.installed = true;
    	Vue$$1.component('VueMockLayout', component);
    }

    // Create module definition for Vue.use()
    var plugin = {
    	install: install$1,
    };

    // To auto-install when vue is found
    var GlobalVue = null;
    if (typeof window !== 'undefined') {
    	GlobalVue = window.Vue;
    } else if (typeof global !== 'undefined') {
    	GlobalVue = global.Vue;
    }
    if (GlobalVue) {
    	GlobalVue.use(plugin);
    }

    // It's possible to expose named exports when writing components that can
    // also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';
    // export const RollupDemoDirective = component;

    exports.install = install$1;
    exports.default = component;

    return exports;

}({},Vue));
